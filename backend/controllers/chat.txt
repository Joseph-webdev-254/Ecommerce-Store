yooh  chat  gat an  issue  with  the delete  user  i test  it  uaing  this  api 
http://localhost:5000/api/users/687b97727228bedea8691a7c
and  this  is  my result
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Error</title>
  </head>
  <body>
    <pre>Cannot DELETE /api/users/687b97727228bedea8691a7c</pre>
  </body>
</html>



this  is  my code  
import asyncHandler from "../middlewares/asyncHandler.js";
import User from "../models/userModel.js";

import bcrypt from "bcryptjs";
import generateToken from "../utilities/createToken.js";
const createUser = asyncHandler(async (req, res) => {
  const { userName, email, password } = req.body;

  if (!userName || !email || !password) {
    throw new Error("please  fill  all  the  input fields");
  }
  const userExists = await User.findOne({ email });
  if (userExists) {
    res.status(400).send("user already exists");
    return;
  }
  const salt = await bcrypt.genSalt(10);
  const hashedPassword = await bcrypt.hash(password, salt);

  const newUser = new User({ userName, email, password: hashedPassword });

  try {
    await newUser.save();

    generateToken(res, newUser._id);
    res.status(201).json({
      _id: newUser._id,
      userName: newUser.userName,
      email: newUser.email,
      isAdmin: newUser.isAdmin,
    });
  } catch (error) {
    console.error("error  in saving  the  user :", error.message);

    res.status(400);
    throw new Error("invalid user data", error.message);
  }
});

const loginUser = asyncHandler(async (req, res) => {
  const { email, password } = req.body;

  const existingUser = await User.findOne({ email });

  if (existingUser) {
    const isPassword = await bcrypt.compare(password, existingUser.password);

    if (isPassword) {
      generateToken(res, existingUser._id);

      res.status(201).json({
        _id: existingUser._id,
        userName: existingUser.userName,
        email: existingUser.email,
        isAdmin: existingUser.isAdmin,
      });
      return; //exit the  function
    }
  }
});
const logOut = asyncHandler(async (req, res) => {
  res.cookie("jwt", "", {
    httpOnly: true,
    expires: new Date(0), // Set the cookie to expire immediatelys
  });

  res.status(200).json({
    message: "User logged out successfully",
  });
});

const getAllUsers = asyncHandler(async (req, res) => {
  const users = await User.find({});
  res.status(200).json(users);
});

const getCurrentUserProfile = asyncHandler(async (req, res) => {
  const user = await User.findById(req.user._id);

  if (user) {
    res.json({
      _id: user._id,
      userName: user.userName,
      email: user.email,
    });
  } else {
    es.status(404);
    throw new Error("user  not  found");
  }
});
const updateCurrentUserProfile = asyncHandler(async (req, res) => {
  const user = await User.findById(req.user._id);
  if (user) {
    user.userName = req.body.userName || user.userName;
    user.email = req.body.email || user.email;

    if (req.body.password) {
      const salt = await bcrypt.genSalt(10);
      const hashedPassword = await bcrypt.hash(req.body.password, salt);
      user.password = hashedPassword;
    }

    const updatedUser = await user.save();
    res.json({
      _id: updatedUser._id,
      userName: updatedUser.userName,
      email: updatedUser.email,
      password: updatedUser.password,
      isAdmin: updatedUser.isAdmin,
    });
  } else {
    res.status(404);
    throw new Error("user not  found");
  }
});

const deleteUserById = asyncHandler(async (req, res) => {
  const user = await User.findById(req.param.id);

  if (user) {
    if (user.isAdmin) {
      res.status(400);
      throw new Error("cannot  delete  Admin");
    }
    await User.deleteOne({ _id: user._id });
  } else {
    res.status(404);
    throw new Error("user not  found");
  }
});

export {
  deleteUserById,
  createUser,
  updateCurrentUserProfile,
  loginUser,
  logOut,
  getAllUsers,
  getCurrentUserProfile,
};
   '
   this  is  my  route 
   import express from "express";
import { authenticate, authorizeAdmin } from "../middlewares/authMiddleware.js";
import {
  createUser,
  loginUser,
  logOut,
  getAllUsers,
  getCurrentUserProfile,
  updateCurrentUserProfile,
  deleteUserById,
} from "../controllers/userController.js";

const router = express.Router();
router
  .route("/")
  .post(createUser)
  .get(authenticate, authorizeAdmin, getAllUsers);
router.post("/auth", loginUser);
router.post("/logout", logOut);
router
  .route("/profile")
  .get(authenticate, getCurrentUserProfile)
  .put(authenticate, updateCurrentUserProfile);

//admin routes
router.route("/_id").delete(authenticate, authorizeAdmin, deleteUserById);

export default router;
